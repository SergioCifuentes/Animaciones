
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon May 25 22:20:52 CST 2020
//----------------------------------------------------

package animaciones.Analizadores.Sintactico;

import animaciones.Analizadores.Semantico.TablaDeSimbolos;
import animaciones.Objetos.Lienzo;
import animaciones.Analizadores.Semantico.Objeto;
import java.util.ArrayList;
import java.awt.Color;
import animaciones.ui.IDE;
import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon May 25 22:20:52 CST 2020
  */
public class AnalizadorSintacticoPintar extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoPintar() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoPintar(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoPintar(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\113\000\002\002\004\000\002\002\007\000\002\002" +
    "\003\000\002\003\005\000\002\003\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\003\000" +
    "\002\022\005\000\002\022\003\000\002\021\005\000\002" +
    "\021\005\000\002\021\003\000\002\014\003\000\002\024" +
    "\005\000\002\024\003\000\002\023\005\000\002\023\005" +
    "\000\002\023\003\000\002\017\005\000\002\017\003\000" +
    "\002\020\005\000\002\020\005\000\002\020\003\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\007\003\000" +
    "\002\007\005\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\013\012\000\002\013\011\000\002\016\004\000\002\016" +
    "\003\000\002\025\006\000\002\025\006\000\002\025\006" +
    "\000\002\025\006\000\002\025\004\000\002\025\003\000" +
    "\002\025\003\000\002\026\014\000\002\027\003\000\002" +
    "\027\003\000\002\030\005\000\002\030\003\000\002\030" +
    "\005\000\002\030\003\000\002\031\012\000\002\031\012" +
    "\000\002\032\006\000\002\032\002\000\002\033\011\000" +
    "\002\033\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\006\003\005\004\004\001\002\000\004\023" +
    "\010\001\002\000\004\002\uffff\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\012\003\012\006" +
    "\016\007\011\010\015\001\002\000\004\045\216\001\002" +
    "\000\004\041\ufff9\001\002\000\004\024\103\001\002\000" +
    "\004\041\101\001\002\000\004\045\043\001\002\000\004" +
    "\045\017\001\002\000\010\025\024\041\ufff4\042\ufff4\001" +
    "\002\000\004\041\ufffc\001\002\000\006\041\ufff7\042\022" +
    "\001\002\000\004\045\017\001\002\000\004\041\ufff8\001" +
    "\002\000\006\045\026\047\030\001\002\000\006\041\ufff6" +
    "\042\ufff6\001\002\000\044\003\ufff3\017\ufff3\020\ufff3\026" +
    "\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3" +
    "\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3\042\ufff3\044" +
    "\ufff3\001\002\000\016\034\034\035\032\036\035\037\033" +
    "\041\ufff5\042\ufff5\001\002\000\044\003\uffe4\017\uffe4\020" +
    "\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4" +
    "\034\034\035\032\036\035\037\033\040\uffe4\041\uffe4\042" +
    "\uffe4\044\uffe4\001\002\000\006\045\026\047\030\001\002" +
    "\000\006\045\uffe2\047\uffe2\001\002\000\006\045\uffe1\047" +
    "\uffe1\001\002\000\006\045\uffe3\047\uffe3\001\002\000\006" +
    "\045\uffe0\047\uffe0\001\002\000\034\003\uffe8\017\uffe8\020" +
    "\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8" +
    "\040\uffe8\041\uffe8\042\uffe8\044\uffe8\001\002\000\044\003" +
    "\uffe5\017\uffe5\020\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5" +
    "\032\uffe5\033\uffe5\034\034\035\032\036\035\037\033\040" +
    "\uffe5\041\uffe5\042\uffe5\044\uffe5\001\002\000\006\045\026" +
    "\047\030\001\002\000\034\003\uffe7\017\uffe7\020\uffe7\026" +
    "\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\040\uffe7" +
    "\041\uffe7\042\uffe7\044\uffe7\001\002\000\044\003\uffe6\017" +
    "\uffe6\020\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6" +
    "\033\uffe6\034\034\035\032\036\035\037\033\040\uffe6\041" +
    "\uffe6\042\uffe6\044\uffe6\001\002\000\010\025\050\041\uffe9" +
    "\042\uffe9\001\002\000\006\041\uffec\042\046\001\002\000" +
    "\004\041\ufffa\001\002\000\004\045\043\001\002\000\004" +
    "\041\uffed\001\002\000\012\011\053\012\054\045\026\047" +
    "\030\001\002\000\016\026\066\027\065\030\070\031\067" +
    "\032\072\033\071\001\002\000\032\026\066\027\065\030" +
    "\070\031\067\032\072\033\071\034\034\035\032\036\035" +
    "\037\033\041\uffea\042\uffea\001\002\000\016\003\uffda\017" +
    "\uffda\020\uffda\041\uffda\042\uffda\044\uffda\001\002\000\016" +
    "\003\uffd9\017\uffd9\020\uffd9\041\uffd9\042\uffd9\044\uffd9\001" +
    "\002\000\006\041\uffeb\042\uffeb\001\002\000\016\003\060" +
    "\017\057\020\062\041\uffdf\042\uffdf\044\uffdf\001\002\000" +
    "\012\011\uffdd\012\uffdd\045\uffdd\047\uffdd\001\002\000\012" +
    "\011\uffdb\012\uffdb\045\uffdb\047\uffdb\001\002\000\012\011" +
    "\053\012\054\045\026\047\030\001\002\000\012\011\uffdc" +
    "\012\uffdc\045\uffdc\047\uffdc\001\002\000\026\026\066\027" +
    "\065\030\070\031\067\032\072\033\071\034\034\035\032" +
    "\036\035\037\033\001\002\000\010\041\uffde\042\uffde\044" +
    "\uffde\001\002\000\006\045\uffd3\047\uffd3\001\002\000\006" +
    "\045\uffd4\047\uffd4\001\002\000\006\045\uffd1\047\uffd1\001" +
    "\002\000\006\045\uffd2\047\uffd2\001\002\000\006\045\uffcf" +
    "\047\uffcf\001\002\000\006\045\uffd0\047\uffd0\001\002\000" +
    "\006\045\026\047\030\001\002\000\016\003\uffd5\017\uffd5" +
    "\020\uffd5\041\uffd5\042\uffd5\044\uffd5\001\002\000\026\003" +
    "\uffd6\017\uffd6\020\uffd6\034\034\035\032\036\035\037\033" +
    "\041\uffd6\042\uffd6\044\uffd6\001\002\000\006\045\026\047" +
    "\030\001\002\000\016\003\uffd8\017\uffd8\020\uffd8\041\uffd8" +
    "\042\uffd8\044\uffd8\001\002\000\026\003\uffd7\017\uffd7\020" +
    "\uffd7\034\034\035\032\036\035\037\033\041\uffd7\042\uffd7" +
    "\044\uffd7\001\002\000\014\003\012\006\016\007\011\010" +
    "\015\024\ufffd\001\002\000\004\024\ufffe\001\002\000\004" +
    "\005\104\001\002\000\004\043\106\001\002\000\004\002" +
    "\000\001\002\000\004\045\107\001\002\000\004\044\110" +
    "\001\002\000\004\023\111\001\002\000\012\013\122\014" +
    "\117\016\112\045\115\001\002\000\004\043\203\001\002" +
    "\000\016\013\uffc4\014\uffc4\016\uffc4\022\uffc4\024\uffc4\045" +
    "\uffc4\001\002\000\016\013\uffc5\014\uffc5\016\uffc5\022\uffc5" +
    "\024\uffc5\045\uffc5\001\002\000\004\025\172\001\002\000" +
    "\004\041\171\001\002\000\004\043\150\001\002\000\016" +
    "\013\122\014\117\016\112\022\uffcb\024\uffcb\045\115\001" +
    "\002\000\004\024\145\001\002\000\004\043\123\001\002" +
    "\000\006\045\026\046\125\001\002\000\004\042\uffc1\001" +
    "\002\000\004\042\uffc2\001\002\000\004\042\127\001\002" +
    "\000\006\045\026\046\125\001\002\000\004\042\131\001" +
    "\002\000\006\045\134\047\030\001\002\000\010\040\143" +
    "\042\uffbf\044\uffbf\001\002\000\012\034\034\035\032\036" +
    "\035\037\033\001\002\000\020\034\ufff3\035\ufff3\036\ufff3" +
    "\037\ufff3\040\141\042\uffbd\044\uffbd\001\002\000\004\042" +
    "\136\001\002\000\006\045\134\047\030\001\002\000\004" +
    "\044\140\001\002\000\004\041\uffc3\001\002\000\006\045" +
    "\134\047\030\001\002\000\006\042\uffbe\044\uffbe\001\002" +
    "\000\006\045\134\047\030\001\002\000\006\042\uffc0\044" +
    "\uffc0\001\002\000\006\002\uffcd\005\104\001\002\000\004" +
    "\002\uffce\001\002\000\006\022\uffcc\024\uffcc\001\002\000" +
    "\012\011\053\012\054\045\151\047\030\001\002\000\030" +
    "\026\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034" +
    "\ufff3\035\ufff3\036\ufff3\037\ufff3\044\164\001\002\000\004" +
    "\044\153\001\002\000\004\021\154\001\002\000\012\013" +
    "\122\014\117\016\112\045\115\001\002\000\004\022\156" +
    "\001\002\000\020\013\uffb9\014\uffb9\015\157\016\uffb9\022" +
    "\uffb9\024\uffb9\045\uffb9\001\002\000\004\021\161\001\002" +
    "\000\016\013\uffbc\014\uffbc\016\uffbc\022\uffbc\024\uffbc\045" +
    "\uffbc\001\002\000\012\013\122\014\117\016\112\045\115" +
    "\001\002\000\004\022\163\001\002\000\016\013\uffba\014" +
    "\uffba\016\uffba\022\uffba\024\uffba\045\uffba\001\002\000\004" +
    "\021\165\001\002\000\012\013\122\014\117\016\112\045" +
    "\115\001\002\000\004\022\167\001\002\000\020\013\uffb9" +
    "\014\uffb9\015\157\016\uffb9\022\uffb9\024\uffb9\045\uffb9\001" +
    "\002\000\016\013\uffbb\014\uffbb\016\uffbb\022\uffbb\024\uffbb" +
    "\045\uffbb\001\002\000\016\013\uffc6\014\uffc6\016\uffc6\022" +
    "\uffc6\024\uffc6\045\uffc6\001\002\000\014\011\053\012\054" +
    "\045\173\046\175\047\030\001\002\000\030\026\ufff3\027" +
    "\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3" +
    "\036\ufff3\037\ufff3\041\202\001\002\000\004\041\201\001" +
    "\002\000\004\041\200\001\002\000\020\026\066\027\065" +
    "\030\070\031\067\032\072\033\071\041\177\001\002\000" +
    "\016\013\uffc9\014\uffc9\016\uffc9\022\uffc9\024\uffc9\045\uffc9" +
    "\001\002\000\016\013\uffc8\014\uffc8\016\uffc8\022\uffc8\024" +
    "\uffc8\045\uffc8\001\002\000\016\013\uffc7\014\uffc7\016\uffc7" +
    "\022\uffc7\024\uffc7\045\uffc7\001\002\000\016\013\uffca\014" +
    "\uffca\016\uffca\022\uffca\024\uffca\045\uffca\001\002\000\012" +
    "\011\053\012\054\045\204\047\030\001\002\000\030\026" +
    "\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3" +
    "\035\ufff3\036\ufff3\037\ufff3\044\212\001\002\000\004\044" +
    "\206\001\002\000\004\021\207\001\002\000\012\013\122" +
    "\014\117\016\112\045\115\001\002\000\004\022\211\001" +
    "\002\000\016\013\uffb8\014\uffb8\016\uffb8\022\uffb8\024\uffb8" +
    "\045\uffb8\001\002\000\004\021\213\001\002\000\012\013" +
    "\122\014\117\016\112\045\115\001\002\000\004\022\215" +
    "\001\002\000\016\013\uffb7\014\uffb7\016\uffb7\022\uffb7\024" +
    "\uffb7\045\uffb7\001\002\000\010\025\223\041\uffee\042\uffee" +
    "\001\002\000\006\041\ufff1\042\221\001\002\000\004\041" +
    "\ufffb\001\002\000\004\045\216\001\002\000\004\041\ufff2" +
    "\001\002\000\006\045\026\046\225\001\002\000\006\041" +
    "\uffef\042\uffef\001\002\000\006\041\ufff0\042\ufff0\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\012\004\013\001\001\000\006\023\216\024\217\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\044\020\043\001\001\000\006\021\020\022" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\021\020\022\022\001\001\000\002\001" +
    "\001\000\006\006\024\014\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\037\001\001\000\004\015" +
    "\030\001\001\000\006\006\035\014\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\037\001\001\000\006" +
    "\006\040\014\041\001\001\000\002\001\001\000\004\015" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\046\020\043\001\001\000\002\001" +
    "\001\000\012\006\050\007\054\010\055\014\051\001\001" +
    "\000\004\012\075\001\001\000\006\012\072\015\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\006\050\007\063\010\055\014\062\001\001" +
    "\000\002\001\001\000\006\012\072\015\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\073\014\074\001\001\000\002\001\001" +
    "\000\004\015\037\001\001\000\006\006\076\014\077\001" +
    "\001\000\002\001\001\000\004\015\037\001\001\000\006" +
    "\003\101\004\013\001\001\000\002\001\001\000\004\013" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\016" +
    "\120\025\117\026\115\031\113\033\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\016\146" +
    "\025\117\026\115\031\113\033\112\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\123\027\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\123\027\127\001\001\000\002\001\001\000\010" +
    "\006\131\014\132\030\134\001\001\000\002\001\001\000" +
    "\004\015\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\006\131\014\132\030\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\006\131\014\132\030\141" +
    "\001\001\000\002\001\001\000\010\006\131\014\132\030" +
    "\143\001\001\000\002\001\001\000\004\013\145\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\006\050\007" +
    "\151\010\055\014\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\016\154\025\117\026" +
    "\115\031\113\033\112\001\001\000\002\001\001\000\004" +
    "\032\157\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\016\161\025\117\026\115\031\113\033\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\016\165\025\117\026\115\031\113\033\112\001\001" +
    "\000\002\001\001\000\004\032\167\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\006\175\007\173\010\055" +
    "\014\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\006\050\007\204\010\055\014\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\016" +
    "\207\025\117\026\115\031\113\033\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\016" +
    "\213\025\117\026\115\031\113\033\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\023\216\024\221\001\001" +
    "\000\002\001\001\000\004\014\223\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoPintar$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoPintar$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoPintar$do_action(act_num, parser, stack, top,this);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public boolean error;
    public boolean errorRecuperable;
    public TablaDeSimbolos tablaDeSimbolos;
        protected IDE ide;
    public  void setFrame(IDE frame){
        ide =frame;
    }
public void setTablaDeSimbolos(TablaDeSimbolos tablaDeSimbolos) {
        this.tablaDeSimbolos = tablaDeSimbolos;
    }
    public  void setTabla(TablaDeSimbolos tabla){
        this.tablaDeSimbolos =tabla;
    }

     public void syntax_error(Symbol s){
        //String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        ide.escribirEnOutput("Error Sintactico Recuperado\n");
        //ide.escribirEnOutput("\t \tLexema: "+ lexema+"\n");
        ide.escribirEnOutput("\t \tFila: "+ fila+"\n");
        ide.escribirEnOutput("\t \tColumna: "+ columna+"\n");
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
//        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        ide.escribirEnOutput("Error Sintactico Panic Mode\n");
  //      ide.escribirEnOutput("\t \tLexema: "+ lexema+"\n");
        ide.escribirEnOutput("\t \tFila: "+ fila+"\n");
        ide.escribirEnOutput("\t \tColumna: "+ columna+"\n");
    }
    
    public void mostrarElementoNoExistente(String nombreLienzo, Symbol s){
    ide.escribirEnOutput("Error Semantico \n");
    ide.escribirEnOutput("Lienzo \""+nombreLienzo+"\" no existe en El Archivo .lnz \n");

}

    public void ayudarConErroresSemanticos(int tipo,Symbol s,String lexema) {
        int fila = s.right;
        int columna = s.left;
            ide.escribirEnOutput("Error Semantico !!!\n"+lexema);
             ide.escribirEnOutput("\t \tFila: "+ fila+"\n");
        ide.escribirEnOutput("\t \tColumna: "+ columna+"\n");
        String texto = "Sugerencias Para Error:\n";
        switch (tipo) {
           case 1:
            texto+=lexema+" no es una variable int\n";
            break;
            case 2:
            texto+=lexema+" no ha sido declarado\n";
            break;
            case 3:
                texto+="No se pudo asignar el valor a "+lexema+", para Variables int se permiten\n\t-Enteros\n\t-Variables int\n\t-Operaciones Aritmeticas\n";
            break;
            case 4:
                texto+="No se pudo asignar el valor a "+lexema+", para Variables String se permiten\n\t-Cadenas De Caracteres(entre Comillas)\n\t-Variables String\n";
            break;
            case 5:
                texto+="No se pudo asignar el valor a "+lexema+", para Variables boolean se permiten\n\t-true\n\t-false\n\t-Variables boolean\n";
            break;
            case 6:
                texto+="Es imposible realizar Operaciones Aritmeticas con una variable no int\n";
                break;
            case 7:
            texto+=lexema+" no es una variable String\n";
            break;
            case 8:
            texto+=lexema+" no es una variable boolean\n";
            break;
            
            default:
                throw new AssertionError();
        }
       ide.escribirEnOutput(texto);
    }


    public void ayudarConErroresSintacticos(int tipo) {
        String texto = "Sugerencias Para Error:\n";
        switch (tipo) {
           case 1:
                texto+="Para la Declaracion de una variable String solo existen tres tipos\n \t-int \n\t-String\n\t-boolean\n";
            break;
            case 2:
                texto+="Se esperaba una variable boolean como por ejemplo:\n \t-true \n\t-false\n\t-Operacion Relacional\n";
            break;
            case 3:
                texto+="Para las Operaciones Relaciones  se permiten:\n \t-== \n\t->\n\t-<\n\t-<=\n\t->=\n\t-<>\n";
            break;  
            case 4:
                texto+="Para las Operaciones Logicas  se permiten:\n \t-AND \n\t-OR\n";
            break;
            case 6:
                texto+="Debes declarar tus variables con: \nVARS[...]\n";
               break;
            default:
                throw new AssertionError();
        }
       ide.escribirEnOutput(texto);
    }



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoPintar$actions {


    private boolean error =false;
    private boolean errorRecuperable=false;
        private ArrayList<Inicializacion> inicializaciones = new ArrayList<>();
    private void resetearAtributos(Object[] atributos){
        for(int i=0;i<atributos.length;i++){
            atributos[i]=null;
        }
    }


    public boolean getError(){
        return error;
    }
        protected void mostrarAtributoRepetido(String atributo, Symbol s,AnalizadorSintacticoPintar asp) {
        asp.ide.escribirEnOutput("Error Semantico \n");
        asp.ide.escribirEnOutput("El atributo " + atributo + " ya se encuentra declarado\n");
        asp.ide.escribirEnOutput("\t \tFila: " + s.right + "\n");
        asp.ide.escribirEnOutput("\t \tColumna: " + s.left + "\n");

    }




    protected void mostrarElementoFaltante(Object[] atributos,int tipo, Symbol s,AnalizadorSintacticoPintar asp) {
        asp.ide.escribirEnOutput("Atributo Faltante: \n");
        String text="";
        switch (tipo) {
            
            case 1:
                if(atributos[0]==null){
                    text+="\t-Red\n";
                }
                if(atributos[1]==null){
                    text+="\t-Green\n";
                }
                if(atributos[2]==null){
                     text+="\t-Blue\n";
                }
                break;
            
        }
        asp.ide.escribirEnOutput(text);
        asp.ide.escribirEnOutput("\t \tFila: " + s.right + "\n");
        asp.ide.escribirEnOutput("\t \tColumna: " + s.left + "\n");

    }


  private final AnalizadorSintacticoPintar parser;

  /** Constructor */
  CUP$AnalizadorSintacticoPintar$actions(AnalizadorSintacticoPintar parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoPintar$do_action(
    int                        CUP$AnalizadorSintacticoPintar$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoPintar$parser,
    java.util.Stack            CUP$AnalizadorSintacticoPintar$stack,
    int                        CUP$AnalizadorSintacticoPintar$top,AnalizadorSintacticoPintar asp)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoPintar$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoPintar$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // While ::= WHILE PARENTESIS_A Id PARENTESIS_C LLAVE_A Codigo LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("While",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // While ::= WHILE PARENTESIS_A Bool PARENTESIS_C LLAVE_A Codigo LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("While",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Else ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Else",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Else ::= ELSE LLAVE_A Codigo LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Else",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // If ::= IF PARENTESIS_A Id PARENTESIS_C LLAVE_A Codigo LLAVE_C Else 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("If",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // If ::= IF PARENTESIS_A Bool PARENTESIS_C LLAVE_A Codigo LLAVE_C Else 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("If",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Num_Pintar ::= Id 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Num_Pintar",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Num_Pintar ::= Id PUNTOS_SEGUIDOS Num_Pintar 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Num_Pintar",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Num_Pintar ::= Numero 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Num_Pintar",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Num_Pintar ::= Numero PUNTOS_SEGUIDOS Num_Pintar 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Num_Pintar",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Id_Pintar ::= VarId 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()).value;
		RESULT =id;
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Id_Pintar",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Id_Pintar ::= String 
            {
              Object RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()).value;
		RESULT =string;
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Id_Pintar",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Pintar ::= PINTAR PARENTESIS_A Id_Pintar COMA Id_Pintar COMA Num_Pintar COMA Num_Pintar PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Pintar",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Instruccion ::= While 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Instruccion",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Instruccion ::= If 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Instruccion",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Instruccion ::= Pintar PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Instruccion",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Instruccion ::= Id IGUAL Bool PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Instruccion",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Instruccion ::= Id IGUAL String PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Instruccion",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Instruccion ::= Id IGUAL Numero PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Instruccion",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Instruccion ::= Id IGUAL Id PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Instruccion",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Codigo ::= Instruccion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Codigo",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Codigo ::= Instruccion Codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Codigo",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Instrucciones ::= INSTRUCCIONES PARENTESIS_A Id PARENTESIS_C CORCHETE_A Codigo CORCHETE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Instrucciones",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Instrucciones ::= INSTRUCCIONES PARENTESIS_A Id PARENTESIS_C CORCHETE_A Codigo CORCHETE_C Instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Instrucciones",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OpRelacional ::= DIFERENTE 
            {
              Object RESULT =null;
		RESULT= Inicializacion.IGUAL_IGUAL;
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("OpRelacional",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OpRelacional ::= MENOR_IGUAL 
            {
              Object RESULT =null;
		RESULT= Inicializacion.IGUAL_IGUAL;
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("OpRelacional",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OpRelacional ::= MAYOR_IGUAL 
            {
              Object RESULT =null;
		RESULT= Inicializacion.IGUAL_IGUAL;
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("OpRelacional",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OpRelacional ::= MAYOR 
            {
              Object RESULT =null;
		RESULT= Inicializacion.IGUAL_IGUAL;
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("OpRelacional",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OpRelacional ::= MENOR 
            {
              Object RESULT =null;
		RESULT= Inicializacion.IGUAL_IGUAL;
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("OpRelacional",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OpRelacional ::= IGUAL_IGUAL 
            {
              Object RESULT =null;
		RESULT= Inicializacion.IGUAL_IGUAL;
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("OpRelacional",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Boolean ::= VarId OpRelacional Numero 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()).value;
		if(id1!=null&&op!=null&&num2!=null){
                                                                try {
                                                    Integer num1=(Integer)id1;
                                                    RESULT = Inicializacion.realizarOperacionRelacional(num1,
                                                                           Integer.parseInt((String)num2),Integer.parseInt((String)op) );
                                                        
                                                        } catch (Exception e) {
                                                             asp.ayudarConErroresSemanticos(1,((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()),(String)id1);
                                                            RESULT =null;
                                                             }
                                                               
                                                                    }else{
                                                                    RESULT=null;
                                                                    }
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Boolean",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Boolean ::= VarId OpRelacional VarId 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()).value;
		if(id1!=null&&op!=null&&id2!=null){
                                                                try {
                                                                Integer num1=(Integer)id1;
                                                    Integer num2=(Integer)id2;
                                                    RESULT = Inicializacion.realizarOperacionRelacional(num1,num2,Integer.parseInt((String)op) );
                                                        
                                                        } catch (Exception e) {
                                                             asp.ayudarConErroresSemanticos(1,((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()),id1+" "+id2);
                                                            RESULT =null;
                                                             }
                                                               
                                                                    }else{
                                                                    RESULT=null;
                                                                    }
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Boolean",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Boolean ::= Numero OpRelacional VarId 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()).value;
		if(num1!=null&&op!=null&&id2!=null){
                                                                try {
                                                    Integer num2=(Integer)id2;
                                                    RESULT = Inicializacion.realizarOperacionRelacional(Integer.parseInt((String)num1),
                                                                           num2,Integer.parseInt((String)op) );
                                                        
                                                        } catch (Exception e) {
                                                             asp.ayudarConErroresSemanticos(1,((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()),(String)id2);
                                                            RESULT =null;
                                                             }
                                                               
                                                                    }else{
                                                                    RESULT=null;
                                                                    }
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Boolean",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Boolean ::= Numero OpRelacional Numero 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()).value;
		if(num1!=null&&op!=null&&num2!=null){
                                                                RESULT = Inicializacion.realizarOperacionRelacional(Integer.parseInt((String)num1),
                                                                           Integer.parseInt((String)num2),Integer.parseInt((String)op) );
                                                                    }else{
                                                                    RESULT=null;
                                                                    }
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Boolean",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Boolean ::= FALSE 
            {
              Object RESULT =null;
		RESULT = false;
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Boolean",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Boolean ::= TRUE 
            {
              Object RESULT =null;
		RESULT = true;
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Boolean",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OpLog ::= error 
            {
              Object RESULT =null;
		asp.ayudarConErroresSintacticos(4);
                            RESULT=null;
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("OpLog",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OpLog ::= OR 
            {
              Object RESULT =null;
		RESULT=Inicializacion.OR;
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("OpLog",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OpLog ::= AND 
            {
              Object RESULT =null;
		RESULT=Inicializacion.AND;
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("OpLog",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Bool ::= Boolean OpLog Bool 
            {
              Object RESULT =null;
		int bool1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).left;
		int bool1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).right;
		Object bool1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)).value;
		int bool2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).left;
		int bool2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).right;
		Object bool2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()).value;
		if(bool1!=null&&op!=null&&bool2!=null){
                                                                RESULT = Inicializacion.realizarOperacionLogica(Boolean.parseBoolean((String)bool1),
                                                                           Boolean.parseBoolean((String)bool2),Integer.parseInt((String)op) );
                                                                    }else{
                                                                    RESULT=null;
                                                                    }
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Bool",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Bool ::= Boolean 
            {
              Object RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).right;
		Object bool = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()).value;
		RESULT =bool;
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Bool",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OpAritmetica ::= DIV 
            {
              Object RESULT =null;
		RESULT=4;
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("OpAritmetica",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OpAritmetica ::= MULT 
            {
              Object RESULT =null;
		RESULT=3;
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("OpAritmetica",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OpAritmetica ::= RESTA 
            {
              Object RESULT =null;
		RESULT=2;
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("OpAritmetica",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OpAritmetica ::= SUMA 
            {
              Object RESULT =null;
		RESULT=1;
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("OpAritmetica",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Numero ::= Entero 
            {
              Object RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).right;
		String entero = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()).value;
		RESULT=Integer.parseInt((String)entero);
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Numero",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Numero ::= Entero OpAritmetica VarId 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).right;
		String num1 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()).value;
		if(id!=null&&num1!=null){
                                                try {
                                                    Integer num2=(Integer)id;
                                                    switch ((Integer)op) {
                                                 case 1:
                                                    RESULT =Integer.parseInt(num1)+num2;
                                                break;
                                                case 2:
                                                    RESULT = Integer.parseInt(num1)-num2;
                                                break;
                                                case 3:
                                                    RESULT =Integer.parseInt(num1)*num2;
                                                break;
                                                case 4:
                                                    RESULT =Integer.parseInt(num1)/num2;
                                                break;
                                                        }
                                                } catch (Exception e) {
                                                    asp.ayudarConErroresSemanticos(1,((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()),(String)id);
                                                    RESULT =null;
                                                    }
                                                
                                            }else{
                                            RESULT=null;
                                            }
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Numero",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Numero ::= VarId OpAritmetica VarId 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()).value;
		if(id2!=null&&id1!=null){
                                                try {
                                                    Integer num1=(Integer)id1;
                                                    Integer num2=(Integer)id2;
                                                    switch ((Integer)op) {
                                                 case 1:
                                                    RESULT = num1+num2;
                                                break;
                                                case 2:
                                                    RESULT = num1-num2;
                                                break;
                                                case 3:
                                                    RESULT =num1*num2;
                                                break;
                                                case 4:
                                                    RESULT = num1/num2;
                                                break;
                                                        }
                                                } catch (Exception e) {
                                                    asp.ayudarConErroresSemanticos(1,((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()),(String)id1);
                                                    RESULT =null;
                                                    }
                                                
                                            }else{
                                            RESULT=null;
                                            }
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Numero",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Numero ::= VarId OpAritmetica Numero 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()).value;
		if(id!=null&&num2!=null){
                                                try {
                                                    Integer num1=(Integer)id;
                                                    switch ((Integer)op) {
                                                 case 1:
                                                    RESULT = num1+(Integer)num2;
                                                break;
                                                case 2:
                                                    RESULT = num1-(Integer)num2;
                                                break;
                                                case 3:
                                                    RESULT = num1*(Integer)num2;
                                                break;
                                                case 4:
                                                    RESULT = num1/(Integer)num2;
                                                break;
                                                        }
                                                } catch (Exception e) {
                                                    asp.ayudarConErroresSemanticos(1,((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()),(String)id);
                                                    RESULT =null;
                                                    }
                                                
                                            }else{
                                            RESULT=null;
                                            }
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Numero",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Numero ::= Entero OpAritmetica Numero 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).right;
		String num1 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()).value;
		if(num1!=null&&num2!=null){

                                                switch ((Integer)op) {
                                                 case 1:
                                                    RESULT = Integer.parseInt(num1)+(Integer)num2;
                                                break;
                                                case 2:
                                                    RESULT = Integer.parseInt(num1)-(Integer)num2;
                                                break;
                                                case 3:
                                                    RESULT = Integer.parseInt(num1)*(Integer)num2;
                                                break;
                                                case 4:
                                                    RESULT = Integer.parseInt(num1)/(Integer)num2;
                                                break;
                                                        }
                                            }else{
                                            RESULT=null;
                                            }
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Numero",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VariableBoolean ::= Id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()).value;
		Inicializacion in = new Inicializacion((String)id,null);
                                          RESULT =in;
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("VariableBoolean",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VariableBoolean ::= Id IGUAL VarId 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).value;
		int inileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()).value;
		
                                            if(ini!=null){Inicializacion in = new Inicializacion((String)id,ini);
                                                RESULT =in;
                                             }else{
                                            Inicializacion in = new Inicializacion((String)id,null);
                                            in.setError(true);
                                            RESULT =in;
                                            }
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("VariableBoolean",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VariableBoolean ::= Id IGUAL Bool 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).value;
		int inileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()).value;
		if(ini!=null){Inicializacion in = new Inicializacion((String)id,ini);
                                                RESULT =in;
                                             }else{
                                            Inicializacion in = new Inicializacion((String)id,null);
                                            in.setError(true);
                                            RESULT =in;
                                            }
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("VariableBoolean",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VariablesBoolean ::= VariableBoolean 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()).value;
		inicializaciones.add(0,(Inicializacion)in);
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("VariablesBoolean",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VariablesBoolean ::= VariableBoolean COMA VariablesBoolean 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).value;
		inicializaciones.add(0,(Inicializacion)in);
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("VariablesBoolean",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VariableString ::= Id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()).value;
		Inicializacion in = new Inicializacion((String)id,null);
                                          RESULT =in;
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("VariableString",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VariableString ::= Id IGUAL VarId 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).value;
		int inileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()).value;
		
                                            if(ini!=null){Inicializacion in = new Inicializacion((String)id,ini);
                                                RESULT =in;
                                             }else{
                                            Inicializacion in = new Inicializacion((String)id,null);
                                            in.setError(true);
                                            RESULT =in;
                                            }
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("VariableString",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VariableString ::= Id IGUAL String 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).value;
		int inileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).right;
		String ini = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()).value;
		if(ini!=null){Inicializacion in = new Inicializacion((String)id,ini);
                                                RESULT =in;
                                             }else{
                                            Inicializacion in = new Inicializacion((String)id,null);
                                            in.setError(true);
                                            RESULT =in;
                                            }
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("VariableString",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VariablesString ::= VariableString 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()).value;
		inicializaciones.add(0,(Inicializacion)in);
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("VariablesString",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VariablesString ::= VariableString COMA VariablesString 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).value;
		inicializaciones.add(0,(Inicializacion)in);
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("VariablesString",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VarId ::= Id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()).value;
		Object valor=asp.tablaDeSimbolos.obtenerExistencia((String)id);
                            if (valor!=null){
                            RESULT=((Objeto)valor).getValor();
                        
                    }else{
                        asp.ayudarConErroresSemanticos(2,((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()),(String)id);
                        RESULT=null;}
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("VarId",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VariableInt ::= Id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()).value;
		Inicializacion in = new Inicializacion((String)id,null);
                                          RESULT =in;
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("VariableInt",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VariableInt ::= Id IGUAL VarId 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).value;
		int inileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()).value;
		
                                            if(ini!=null){Inicializacion in = new Inicializacion((String)id,ini);
                                                RESULT =in;
                                             }else{
                                            Inicializacion in = new Inicializacion((String)id,null);
                                            in.setError(true);
                                            RESULT =in;
                                            }
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("VariableInt",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VariableInt ::= Id IGUAL Numero 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).value;
		int inileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()).value;
		
                                            if(ini!=null){Inicializacion in = new Inicializacion((String)id,ini);
                                                RESULT =in;
                                             }else{
                                            Inicializacion in = new Inicializacion((String)id,null);
                                            in.setError(true);
                                            RESULT =in;
                                            }
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("VariableInt",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VariablesInt ::= VariableInt 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()).value;
		inicializaciones.add(0,(Inicializacion)in);
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("VariablesInt",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VariablesInt ::= VariableInt COMA VariablesInt 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).value;
		inicializaciones.add(0,(Inicializacion)in);
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("VariablesInt",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Declaracion ::= error 
            {
              Object RESULT =null;
		asp.ayudarConErroresSintacticos(1);
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Declaracion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Declaracion ::= BOOLEAN VariablesBoolean 
            {
              Object RESULT =null;
		for (int i = 0; i < inicializaciones.size(); i++) {
                                     if(asp.tablaDeSimbolos.obtenerTipo((String)inicializaciones.get(i).getId())==null){
                                            if(inicializaciones.get(i).getValor()==null){
                                                if(inicializaciones.get(i).isError()){
                                                    asp.ayudarConErroresSemanticos(TablaDeSimbolos.TIPO_BOOLEAN-1,((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()),(String)inicializaciones.get(i).getId());
                                                }
                                                asp.tablaDeSimbolos.insertObject((String)inicializaciones.get(i).getId(),TablaDeSimbolos.TIPO_BOOLEAN,null);
                                           }else{
                                               if(Inicializacion.verificarTipo(TablaDeSimbolos.TIPO_BOOLEAN,inicializaciones.get(i).getValor())) {
                                                    asp.tablaDeSimbolos.insertObject((String)inicializaciones.get(i).getId(),TablaDeSimbolos.TIPO_BOOLEAN,inicializaciones.get(i).getValor());
                                                    System.out.println("Valor guardado");
                                                }else{
                                                     asp.ayudarConErroresSemanticos(TablaDeSimbolos.TIPO_BOOLEAN-1,((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()),(String)inicializaciones.get(i).getId());
                                                }
                                           }
                                    }else{
                                        mostrarAtributoRepetido((String)inicializaciones.get(i).getId(),((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()),asp);
                                    }
                                    
                                }inicializaciones= new ArrayList<>();
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Declaracion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Declaracion ::= STRING VariablesString 
            {
              Object RESULT =null;
		for (int i = 0; i < inicializaciones.size(); i++) {
                                     if(asp.tablaDeSimbolos.obtenerTipo((String)inicializaciones.get(i).getId())==null){
                                            if(inicializaciones.get(i).getValor()==null){
                                                if(inicializaciones.get(i).isError()){
                                                    asp.ayudarConErroresSemanticos(TablaDeSimbolos.TIPO_STRING-1,((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()),(String)inicializaciones.get(i).getId());
                                                }
                                                asp.tablaDeSimbolos.insertObject((String)inicializaciones.get(i).getId(),TablaDeSimbolos.TIPO_STRING,null);
                                           }else{
                                               if(Inicializacion.verificarTipo(TablaDeSimbolos.TIPO_STRING,inicializaciones.get(i).getValor())) {
                                                    asp.tablaDeSimbolos.insertObject((String)inicializaciones.get(i).getId(),TablaDeSimbolos.TIPO_STRING,inicializaciones.get(i).getValor());
                                                    System.out.println("Valor guardado");
                                                }else{
                                                     asp.ayudarConErroresSemanticos(TablaDeSimbolos.TIPO_STRING-1,((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()),(String)inicializaciones.get(i).getId());
                                                }
                                           }
                                    }else{
                                        mostrarAtributoRepetido((String)inicializaciones.get(i).getId(),((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()),asp);
                                    }
                                    
                                }inicializaciones= new ArrayList<>();
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Declaracion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Declaracion ::= INT VariablesInt 
            {
              Object RESULT =null;
		for (int i = 0; i < inicializaciones.size(); i++) {
                                     if(asp.tablaDeSimbolos.obtenerTipo((String)inicializaciones.get(i).getId())==null){
                                            if(inicializaciones.get(i).getValor()==null){
                                                if(inicializaciones.get(i).isError()){
                                                    asp.ayudarConErroresSemanticos(TablaDeSimbolos.TIPO_INT-1,((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()),(String)inicializaciones.get(i).getId());
                                                }
                                                asp.tablaDeSimbolos.insertObject((String)inicializaciones.get(i).getId(),TablaDeSimbolos.TIPO_INT,null);
                                           }else{
                                               if(Inicializacion.verificarTipo(TablaDeSimbolos.TIPO_INT,inicializaciones.get(i).getValor())) {
                                                    asp.tablaDeSimbolos.insertObject((String)inicializaciones.get(i).getId(),TablaDeSimbolos.TIPO_INT,inicializaciones.get(i).getValor());
                                                    System.out.println("Valor guardado");
                                                }else{
                                                     asp.ayudarConErroresSemanticos(TablaDeSimbolos.TIPO_INT-1,((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()),(String)inicializaciones.get(i).getId());
                                                }
                                           }
                                    }else{
                                        mostrarAtributoRepetido((String)inicializaciones.get(i).getId(),((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()),asp);
                                    }
                                    
                                }inicializaciones= new ArrayList<>();
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Declaracion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Declaraciones ::= Declaracion PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Declaraciones",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Declaraciones ::= Declaracion PUNTO_COMA Declaraciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Declaraciones",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Inicio ::= error 
            {
              Object RESULT =null;
		error=true;asp.ayudarConErroresSintacticos(6);asp.error=this.error;asp.errorRecuperable=this.errorRecuperable;
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Inicio ::= VARS CORCHETE_A Declaraciones CORCHETE_C Instrucciones 
            {
              Object RESULT =null;
		asp.error=this.error;asp.errorRecuperable=this.errorRecuperable;
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoPintar$parser.done_parsing();
          return CUP$AnalizadorSintacticoPintar$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

