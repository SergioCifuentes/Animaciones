
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon May 25 12:07:17 CST 2020
//----------------------------------------------------

package animaciones.Analizadores.Sintactico;

import animaciones.Analizadores.Semantico.TablaDeSimbolos;
import animaciones.Objetos.Lienzo;
import animaciones.Analizadores.Semantico.Objeto;
import java.util.ArrayList;
import java.awt.Color;
import animaciones.ui.IDE;
import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon May 25 12:07:17 CST 2020
  */
public class AnalizadorSintacticoPintar extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoPintar() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoPintar(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoPintar(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\071\000\002\002\004\000\002\002\007\000\002\002" +
    "\003\000\002\003\005\000\002\003\004\000\002\004\004" +
    "\000\002\004\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\006\005\000\002\006\003\000\002" +
    "\007\005\000\002\007\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\003\000\002\012\003\000\002\012\003\000\002" +
    "\013\003\000\002\013\005\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\005\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\017\012\000\002\017" +
    "\011\000\002\020\004\000\002\020\003\000\002\021\006" +
    "\000\002\021\004\000\002\021\003\000\002\021\003\000" +
    "\002\022\014\000\002\023\003\000\002\023\003\000\002" +
    "\024\005\000\002\024\003\000\002\025\012\000\002\026" +
    "\006\000\002\026\002\000\002\027\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\155\000\006\003\005\004\004\001\002\000\004\023" +
    "\010\001\002\000\004\002\uffff\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\012\003\013\006" +
    "\017\007\012\010\016\001\002\000\004\045\151\001\002" +
    "\000\004\045\ufff9\001\002\000\004\041\ufffb\001\002\000" +
    "\004\024\022\001\002\000\004\041\020\001\002\000\004" +
    "\045\ufff8\001\002\000\004\045\ufffa\001\002\000\014\003" +
    "\013\006\017\007\012\010\016\024\ufffd\001\002\000\004" +
    "\024\ufffe\001\002\000\004\005\023\001\002\000\004\043" +
    "\025\001\002\000\004\002\000\001\002\000\004\045\026" +
    "\001\002\000\004\044\027\001\002\000\004\023\030\001" +
    "\002\000\012\013\041\014\036\016\031\045\034\001\002" +
    "\000\004\043\143\001\002\000\016\013\uffd3\014\uffd3\016" +
    "\uffd3\022\uffd3\024\uffd3\045\uffd3\001\002\000\016\013\uffd2" +
    "\014\uffd2\016\uffd2\022\uffd2\024\uffd2\045\uffd2\001\002\000" +
    "\004\025\134\001\002\000\004\041\133\001\002\000\004" +
    "\043\076\001\002\000\016\013\041\014\036\016\031\022" +
    "\uffd6\024\uffd6\045\034\001\002\000\004\024\073\001\002" +
    "\000\004\043\042\001\002\000\006\045\043\046\044\001" +
    "\002\000\004\042\uffcf\001\002\000\004\042\uffd0\001\002" +
    "\000\004\042\046\001\002\000\006\045\043\046\044\001" +
    "\002\000\004\042\050\001\002\000\006\045\052\047\054" +
    "\001\002\000\010\040\071\042\uffcd\044\uffcd\001\002\000" +
    "\044\003\uffe9\017\uffe9\020\uffe9\026\uffe9\027\uffe9\030\uffe9" +
    "\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037" +
    "\uffe9\040\uffe9\041\uffe9\042\uffe9\044\uffe9\001\002\000\004" +
    "\042\066\001\002\000\044\003\uffea\017\uffea\020\uffea\026" +
    "\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea" +
    "\035\uffea\036\uffea\037\uffea\040\uffea\041\uffea\042\uffea\044" +
    "\uffea\001\002\000\044\003\uffeb\017\uffeb\020\uffeb\026\uffeb" +
    "\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\060\035" +
    "\056\036\061\037\057\040\uffeb\041\uffeb\042\uffeb\044\uffeb" +
    "\001\002\000\006\045\052\047\054\001\002\000\006\045" +
    "\052\047\054\001\002\000\006\045\052\047\054\001\002" +
    "\000\006\045\052\047\054\001\002\000\034\003\uffec\017" +
    "\uffec\020\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec" +
    "\033\uffec\040\uffec\041\uffec\042\uffec\044\uffec\001\002\000" +
    "\034\003\uffef\017\uffef\020\uffef\026\uffef\027\uffef\030\uffef" +
    "\031\uffef\032\uffef\033\uffef\040\uffef\041\uffef\042\uffef\044" +
    "\uffef\001\002\000\034\003\uffed\017\uffed\020\uffed\026\uffed" +
    "\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed\040\uffed\041" +
    "\uffed\042\uffed\044\uffed\001\002\000\034\003\uffee\017\uffee" +
    "\020\uffee\026\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033" +
    "\uffee\040\uffee\041\uffee\042\uffee\044\uffee\001\002\000\006" +
    "\045\052\047\054\001\002\000\004\044\070\001\002\000" +
    "\004\041\uffd1\001\002\000\006\045\052\047\054\001\002" +
    "\000\006\042\uffce\044\uffce\001\002\000\006\002\uffd8\005" +
    "\023\001\002\000\004\002\uffd9\001\002\000\006\022\uffd7" +
    "\024\uffd7\001\002\000\012\011\100\012\101\045\052\047" +
    "\054\001\002\000\020\003\123\026\122\027\126\030\130" +
    "\031\131\032\127\033\125\001\002\000\016\003\uffe3\017" +
    "\uffe3\020\uffe3\041\uffe3\042\uffe3\044\uffe3\001\002\000\016" +
    "\003\uffe2\017\uffe2\020\uffe2\041\uffe2\042\uffe2\044\uffe2\001" +
    "\002\000\004\044\111\001\002\000\016\003\104\017\105" +
    "\020\107\041\uffe8\042\uffe8\044\uffe8\001\002\000\012\011" +
    "\uffe4\012\uffe4\045\uffe4\047\uffe4\001\002\000\012\011\uffe6" +
    "\012\uffe6\045\uffe6\047\uffe6\001\002\000\012\011\100\012" +
    "\101\045\052\047\054\001\002\000\012\011\uffe5\012\uffe5" +
    "\045\uffe5\047\uffe5\001\002\000\010\041\uffe7\042\uffe7\044" +
    "\uffe7\001\002\000\004\021\112\001\002\000\012\013\041" +
    "\014\036\016\031\045\034\001\002\000\004\022\114\001" +
    "\002\000\020\013\uffca\014\uffca\015\115\016\uffca\022\uffca" +
    "\024\uffca\045\uffca\001\002\000\004\021\117\001\002\000" +
    "\016\013\uffcc\014\uffcc\016\uffcc\022\uffcc\024\uffcc\045\uffcc" +
    "\001\002\000\012\013\041\014\036\016\031\045\034\001" +
    "\002\000\004\022\121\001\002\000\016\013\uffcb\014\uffcb" +
    "\016\uffcb\022\uffcb\024\uffcb\045\uffcb\001\002\000\006\045" +
    "\uffe0\047\uffe0\001\002\000\006\045\uffda\047\uffda\001\002" +
    "\000\006\045\052\047\054\001\002\000\006\045\uffdb\047" +
    "\uffdb\001\002\000\006\045\uffdf\047\uffdf\001\002\000\006" +
    "\045\uffdc\047\uffdc\001\002\000\006\045\uffde\047\uffde\001" +
    "\002\000\006\045\uffdd\047\uffdd\001\002\000\016\003\uffe1" +
    "\017\uffe1\020\uffe1\041\uffe1\042\uffe1\044\uffe1\001\002\000" +
    "\016\013\uffd4\014\uffd4\016\uffd4\022\uffd4\024\uffd4\045\uffd4" +
    "\001\002\000\016\003\137\011\100\012\101\045\052\046" +
    "\140\047\054\001\002\000\006\041\ufff1\042\ufff1\001\002" +
    "\000\004\041\142\001\002\000\006\041\ufff0\042\ufff0\001" +
    "\002\000\006\041\ufff3\042\ufff3\001\002\000\024\003\123" +
    "\026\122\027\126\030\130\031\131\032\127\033\125\041" +
    "\ufff2\042\ufff2\001\002\000\016\013\uffd5\014\uffd5\016\uffd5" +
    "\022\uffd5\024\uffd5\045\uffd5\001\002\000\012\011\100\012" +
    "\101\045\052\047\054\001\002\000\004\044\145\001\002" +
    "\000\004\021\146\001\002\000\012\013\041\014\036\016" +
    "\031\045\034\001\002\000\004\022\150\001\002\000\016" +
    "\013\uffc9\014\uffc9\016\uffc9\022\uffc9\024\uffc9\045\uffc9\001" +
    "\002\000\010\025\156\041\ufff4\042\ufff4\001\002\000\006" +
    "\041\ufff6\042\154\001\002\000\004\041\ufffc\001\002\000" +
    "\004\045\151\001\002\000\004\041\ufff7\001\002\000\016" +
    "\003\137\011\100\012\101\045\052\046\140\047\054\001" +
    "\002\000\006\041\ufff5\042\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\155\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\013\004\014\005\010\001\001\000\006\006\152\007" +
    "\151\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\020\004\014\005\010\001\001\000\002" +
    "\001\001\000\004\017\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\020\037\021\036\022\034\025\031\027" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\020\074\021\036\022\034\025\031\027\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\046\001\001\000\002\001\001\000" +
    "\010\011\050\012\054\024\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\064\012\054\001\001\000\006" +
    "\011\063\012\054\001\001\000\006\011\062\012\054\001" +
    "\001\000\006\011\061\012\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\011\050\012\054\024\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\071\012\054\001\001\000" +
    "\002\001\001\000\004\017\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\011\076\012\054\013\101\014" +
    "\102\001\001\000\004\016\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\011\076" +
    "\012\054\013\107\014\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\020\112\021\036" +
    "\022\034\025\031\027\032\001\001\000\002\001\001\000" +
    "\004\026\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\020\117\021\036\022\034\025\031\027\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\131\012\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\010\135\011\140\012\054\013\134\014\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\123\001\001\000\002" +
    "\001\001\000\012\011\076\012\054\013\143\014\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\020\146" +
    "\021\036\022\034\025\031\027\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\154\007\151\001\001\000" +
    "\002\001\001\000\014\010\156\011\140\012\054\013\134" +
    "\014\102\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoPintar$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoPintar$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoPintar$do_action(act_num, parser, stack, top,this);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public boolean error;
    public boolean errorRecuperable;
    public TablaDeSimbolos tablaDeSimbolos;
        protected IDE ide;
    public  void setFrame(IDE frame){
        ide =frame;
    }
public void setTablaDeSimbolos(TablaDeSimbolos tablaDeSimbolos) {
        this.tablaDeSimbolos = tablaDeSimbolos;
    }
    public  void setTabla(TablaDeSimbolos tabla){
        this.tablaDeSimbolos =tabla;
    }

     public void syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        ide.escribirEnOutput("Error Sintactico Recuperado\n");
        ide.escribirEnOutput("\t \tLexema: "+ lexema+"\n");
        ide.escribirEnOutput("\t \tFila: "+ fila+"\n");
        ide.escribirEnOutput("\t \tColumna: "+ columna+"\n");
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
//        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        ide.escribirEnOutput("Error Sintactico Panic Mode\n");
  //      ide.escribirEnOutput("\t \tLexema: "+ lexema+"\n");
        ide.escribirEnOutput("\t \tFila: "+ fila+"\n");
        ide.escribirEnOutput("\t \tColumna: "+ columna+"\n");
    }
    
    public void mostrarElementoNoExistente(String nombreLienzo, Symbol s){
    ide.escribirEnOutput("Error Semantico \n");
    ide.escribirEnOutput("Lienzo \""+nombreLienzo+"\" no existe en El Archivo .lnz \n");

}

    public void ayudarConErroresSemanticos(int tipo,Symbol s,String lexema) {
        int fila = s.right;
        int columna = s.left;
            ide.escribirEnOutput("Error Semantico !!!\n"+lexema);
             ide.escribirEnOutput("\t \tFila: "+ fila+"\n");
        ide.escribirEnOutput("\t \tColumna: "+ columna+"\n");
        String texto = "Sugerencias Para Error:\n";
        switch (tipo) {
           case 1:
            texto+=lexema+" no es una variable int";
            break;
            case 2:
            texto+=lexema+" no ha sido declarado";
            break;
            case 3:
                texto+="No se pudo asignar el valor a "+lexema+", para Variables int se permiten\n\t-Enteros\n\t-Variables int\n\t-Operaciones Aritmeticas\n";
            break;
            case 4:
                texto+="No se pudo asignar el valor a "+lexema+", para Variables String se permiten\n\t-Cadenas De Caracteres(entre Comillas)\n\t-Variables String\n";
            break;
            case 5:
                texto+="No se pudo asignar el valor a "+lexema+", para Variables boolean se permiten\n\t-true\n\t-false\n\t-Variables boolean\n";
            break;
            case 6:
                texto+="Es imposible realizar Operaciones Aritmeticas con una variable no int\n";
                break;
            
            default:
                throw new AssertionError();
        }
       ide.escribirEnOutput(texto);
    }


    public void ayudarConErroresSintacticos(int tipo) {
        String texto = "Sugerencias Para Error:\n";
        switch (tipo) {
           case 1:
                texto+="Para la Declaracion de una variable solo existen tres tipos\n \t-int \n\t-String\n\t-boolean\n";
            break;
            case 2:
                texto+="Se esperaba una variable bolean como por ejemplo:\n \t-true \n\t-false\n\t-Operacion Relacional\n";
            break;
            case 3:
                texto+="Para las Operaciones Relaciones  se permiten:\n \t-== \n\t->\n\t-<\n\t-<=\n\t->=\n\t-<>\n";
            break;  
            case 4:
                texto+="Para las Operaciones Logicas  se permiten:\n \t-AND \n\t-OR\n";
            break;
            case 6:
                texto+="Debes declarar tus variables con: \nVARS[...]\n";
               break;
            default:
                throw new AssertionError();
        }
       ide.escribirEnOutput(texto);
    }



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoPintar$actions {


    private boolean error =false;
    private boolean errorRecuperable=false;
        private ArrayList<Inicializacion> inicializaciones = new ArrayList<>();
    private void resetearAtributos(Object[] atributos){
        for(int i=0;i<atributos.length;i++){
            atributos[i]=null;
        }
    }


    public boolean getError(){
        return error;
    }
        protected void mostrarAtributoRepetido(String atributo, Symbol s,AnalizadorSintacticoPintar asp) {
        asp.ide.escribirEnOutput("Error Semantico \n");
        asp.ide.escribirEnOutput("El atributo " + atributo + " ya se encuentra declarado\n");
        asp.ide.escribirEnOutput("\t \tFila: " + s.right + "\n");
        asp.ide.escribirEnOutput("\t \tColumna: " + s.left + "\n");

    }




    protected void mostrarElementoFaltante(Object[] atributos,int tipo, Symbol s,AnalizadorSintacticoPintar asp) {
        asp.ide.escribirEnOutput("Atributo Faltante: \n");
        String text="";
        switch (tipo) {
            
            case 1:
                if(atributos[0]==null){
                    text+="\t-Red\n";
                }
                if(atributos[1]==null){
                    text+="\t-Green\n";
                }
                if(atributos[2]==null){
                     text+="\t-Blue\n";
                }
                break;
            
        }
        asp.ide.escribirEnOutput(text);
        asp.ide.escribirEnOutput("\t \tFila: " + s.right + "\n");
        asp.ide.escribirEnOutput("\t \tColumna: " + s.left + "\n");

    }


  private final AnalizadorSintacticoPintar parser;

  /** Constructor */
  CUP$AnalizadorSintacticoPintar$actions(AnalizadorSintacticoPintar parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoPintar$do_action(
    int                        CUP$AnalizadorSintacticoPintar$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoPintar$parser,
    java.util.Stack            CUP$AnalizadorSintacticoPintar$stack,
    int                        CUP$AnalizadorSintacticoPintar$top,AnalizadorSintacticoPintar asp)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoPintar$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoPintar$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // While ::= WHILE PARENTESIS_A Bool PARENTESIS_C LLAVE_A Codigo LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("While",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Else ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Else",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Else ::= ELSE LLAVE_A Codigo LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Else",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // If ::= IF PARENTESIS_A Bool PARENTESIS_C LLAVE_A Codigo LLAVE_C Else 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("If",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Num_Pintar ::= Numero 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Num_Pintar",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Num_Pintar ::= Numero PUNTOS_SEGUIDOS Numero 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Num_Pintar",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Id_Pintar ::= Id 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Id_Pintar",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Id_Pintar ::= String 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Id_Pintar",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Pintar ::= PINTAR PARENTESIS_A Id_Pintar COMA Id_Pintar COMA Num_Pintar COMA Num_Pintar PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Pintar",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Instruccion ::= While 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Instruccion",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Instruccion ::= If 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Instruccion",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Instruccion ::= Pintar PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Instruccion",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Instruccion ::= Id IGUAL Inicializacion PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Instruccion",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Codigo ::= Instruccion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Codigo",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Codigo ::= Instruccion Codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Codigo",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Instrucciones ::= INSTRUCCIONES PARENTESIS_A Id PARENTESIS_C CORCHETE_A Codigo CORCHETE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Instrucciones",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Instrucciones ::= INSTRUCCIONES PARENTESIS_A Id PARENTESIS_C CORCHETE_A Codigo CORCHETE_C Instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Instrucciones",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OpRelacional ::= error 
            {
              Object RESULT =null;
		asp.ayudarConErroresSintacticos(3);
                            RESULT=null;
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("OpRelacional",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OpRelacional ::= DIFERENTE 
            {
              Object RESULT =null;
		RESULT= Inicializacion.IGUAL_IGUAL;
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("OpRelacional",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OpRelacional ::= MENOR_IGUAL 
            {
              Object RESULT =null;
		RESULT= Inicializacion.IGUAL_IGUAL;
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("OpRelacional",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OpRelacional ::= MAYOR_IGUAL 
            {
              Object RESULT =null;
		RESULT= Inicializacion.IGUAL_IGUAL;
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("OpRelacional",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OpRelacional ::= MAYOR 
            {
              Object RESULT =null;
		RESULT= Inicializacion.IGUAL_IGUAL;
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("OpRelacional",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OpRelacional ::= MENOR 
            {
              Object RESULT =null;
		RESULT= Inicializacion.IGUAL_IGUAL;
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("OpRelacional",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OpRelacional ::= IGUAL_IGUAL 
            {
              Object RESULT =null;
		RESULT= Inicializacion.IGUAL_IGUAL;
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("OpRelacional",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Boolean ::= Numero OpRelacional Numero 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()).value;
		if(num1!=null&&op!=null&&num2!=null){
                                                                RESULT = Inicializacion.realizarOperacionRelacional(Integer.parseInt((String)num1),
                                                                           Integer.parseInt((String)num2),Integer.parseInt((String)op) );
                                                                    }else{
                                                                    RESULT=null;
                                                                    }
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Boolean",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Boolean ::= FALSE 
            {
              Object RESULT =null;
		RESULT = false;
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Boolean",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Boolean ::= TRUE 
            {
              Object RESULT =null;
		RESULT = true;
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Boolean",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OpLog ::= error 
            {
              Object RESULT =null;
		asp.ayudarConErroresSintacticos(4);
                            RESULT=null;
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("OpLog",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OpLog ::= OR 
            {
              Object RESULT =null;
		RESULT=Inicializacion.OR;
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("OpLog",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OpLog ::= AND 
            {
              Object RESULT =null;
		RESULT=Inicializacion.AND;
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("OpLog",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Bool ::= Boolean OpLog Bool 
            {
              Object RESULT =null;
		int bool1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).left;
		int bool1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).right;
		Object bool1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)).value;
		int bool2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).left;
		int bool2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).right;
		Object bool2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()).value;
		if(bool1!=null&&op!=null&&bool2!=null){
                                                                RESULT = Inicializacion.realizarOperacionLogica(Boolean.parseBoolean((String)bool1),
                                                                           Boolean.parseBoolean((String)bool2),Integer.parseInt((String)op) );
                                                                    }else{
                                                                    RESULT=null;
                                                                    }
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Bool",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Bool ::= Boolean 
            {
              Object RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).right;
		Object bool = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()).value;
		RESULT =bool;
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Bool",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Num ::= Id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()).value;
		Object valor=asp.tablaDeSimbolos.obtenerExistencia((String)id,TablaDeSimbolos.TIPO_INT);
                            if (valor!=null){
                            RESULT=((Objeto)valor).getValor();
                            
                        
                    }else if(asp.tablaDeSimbolos.obtenerTipo((String)id)!=null){
                      
                        asp.ayudarConErroresSemanticos(1,((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()),(String)id);
                        RESULT=null;
                        }else{
                        asp.ayudarConErroresSemanticos(2,((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()),(String)id);
                        RESULT=null;}
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Num",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Num ::= Entero 
            {
              Object RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).right;
		String entero = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()).value;
                RESULT=Integer.parseInt((String)entero);
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Num",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Numero ::= Num 
            {
              Object RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).right;
		Object entero = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()).value;
                RESULT=entero;
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Numero",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Numero ::= Num DIV Numero 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()).value;
		if(num1!=null&&num2!=null){
                                            int in1;
                                            int in2;
                                            try {
                                                in1 =(Integer)num1;
                                                in2 =(Integer)num2;
                                                RESULT=in1/in2;
                                            } catch (Exception e) {
                                                asp.ayudarConErroresSemanticos(6,((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()),null);
                                                RESULT=null;
                                            }
                                            }else{
                                            RESULT=null;
                                            }
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Numero",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Numero ::= Num MULT Numero 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()).value;
		if(num1!=null&&num2!=null){
                                            int in1;
                                            int in2;
                                            try {
                                                in1 =(Integer)num1;
                                                in2 =(Integer)num2;
                                                RESULT=in1*in2;
                                            } catch (Exception e) {
                                                asp.ayudarConErroresSemanticos(6,((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()),null);
                                                RESULT=null;
                                            }
                                            }else{
                                            RESULT=null;
                                            }
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Numero",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Numero ::= Num RESTA Numero 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()).value;
		if(num1!=null&&num2!=null){
                                            int in1;
                                            int in2;
                                            try {
                                                
                                                in1 =(Integer)num1;
                                                in2 =(Integer)num2;
                                                RESULT=in1-in2;
                                            } catch (Exception e) {
                                                asp.ayudarConErroresSemanticos(6,((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()),null);
                                                RESULT=null;
                                            }
                                            }else{
                                               
                                            RESULT=null;
                                            }
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Numero",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Numero ::= Num SUMA Numero 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()).value;
		if(num1!=null&&num2!=null){
                                            int in1;
                                            int in2;
                                            try {
                                                in1 =(Integer)num1;
                                                in2 =(Integer)num2;
                                               RESULT=in1+in2;
                                            } catch (Exception e) {
                                                asp.ayudarConErroresSemanticos(6,((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()),null);
                                                RESULT=null;
                                            }
                                            }else{
                                        
                                            RESULT=null;
                                            }
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Numero",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Inicializacion ::= error 
            {
              Object RESULT =null;
		int erleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).left;
		int erright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).right;
		Object er = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()).value;
		RESULT=null;
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Inicializacion",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Inicializacion ::= Bool 
            {
              Object RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()).value;
		RESULT=ini;
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Inicializacion",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Inicializacion ::= Numero 
            {
              Object RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()).value;
		RESULT=ini;
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Inicializacion",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Inicializacion ::= String 
            {
              Object RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).right;
		String ini = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()).value;
		RESULT=(String)ini.substring(1,((String)ini).length());
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Inicializacion",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Variable ::= Id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()).value;
		Inicializacion in = new Inicializacion((String)id,null);
                                          RESULT =in;
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Variable",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Variable ::= Id IGUAL Inicializacion 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).value;
		int inileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()).value;
		if(ini!=null){Inicializacion in = new Inicializacion((String)id,ini);
                                                RESULT =in;
                                             }else{
                                            Inicializacion in = new Inicializacion((String)id,null);
                                            in.setError(true);
                                            RESULT =in;
                                            }
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Variable",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Variables ::= Variable 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()).value;
		inicializaciones.add(0,(Inicializacion)in);
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Variables",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Variables ::= Variable COMA Variables 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)).value;
		inicializaciones.add(0,(Inicializacion)in);
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Variables",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Tipo ::= BOOLEAN 
            {
              Object RESULT =null;
		RESULT = TablaDeSimbolos.TIPO_BOOLEAN;
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Tipo",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Tipo ::= STRING 
            {
              Object RESULT =null;
		RESULT = TablaDeSimbolos.TIPO_STRING;
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Tipo",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Tipo ::= INT 
            {
              Object RESULT =null;
		RESULT = TablaDeSimbolos.TIPO_INT;
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Tipo",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Declaracion ::= error 
            {
              Object RESULT =null;
		asp.ayudarConErroresSintacticos(1);
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Declaracion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Declaracion ::= Tipo Variables 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)).value;
		for (int i = 0; i < inicializaciones.size(); i++) {
                        System.out.println((String)inicializaciones.get(i).getId()+"IDDDDD\n");
                                     if(asp.tablaDeSimbolos.obtenerTipo((String)inicializaciones.get(i).getId())==null){
                                            if(inicializaciones.get(i).getValor()==null){
                                                   System.out.println("nuuuuulooo\n");
                                                if(inicializaciones.get(i).isError()){
                                                    asp.ayudarConErroresSemanticos((Integer)tipo-1,((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()),(String)inicializaciones.get(i).getId());
                                                }
                                                asp.tablaDeSimbolos.insertObject((String)inicializaciones.get(i).getId(),(Integer)tipo ,null);
                                           }else{
                                                System.out.println("nnnooo nulo\n");
                                               if(Inicializacion.verificarTipo((Integer)tipo,inicializaciones.get(i).getValor())) {
                                                    asp.tablaDeSimbolos.insertObject((String)inicializaciones.get(i).getId(),(Integer)tipo,inicializaciones.get(i).getValor());
                                                    System.out.println("Valor guardado");
                                                }else{
                                                     asp.ayudarConErroresSemanticos((Integer)tipo-1,((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()),(String)inicializaciones.get(i).getId());
                                                }
                                           }
                                    }else{
                                        mostrarAtributoRepetido((String)inicializaciones.get(i).getId(),((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()),asp);
                                    }
                                    
                                }inicializaciones= new ArrayList<>();
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Declaracion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Declaraciones ::= Declaracion PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Declaraciones",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Declaraciones ::= Declaracion PUNTO_COMA Declaraciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Declaraciones",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Inicio ::= error 
            {
              Object RESULT =null;
		error=true;asp.ayudarConErroresSintacticos(6);asp.error=this.error;asp.errorRecuperable=this.errorRecuperable;
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Inicio ::= VARS CORCHETE_A Declaraciones CORCHETE_C Instrucciones 
            {
              Object RESULT =null;
		asp.error=this.error;asp.errorRecuperable=this.errorRecuperable;
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoPintar$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.elementAt(CUP$AnalizadorSintacticoPintar$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoPintar$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoPintar$parser.done_parsing();
          return CUP$AnalizadorSintacticoPintar$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

