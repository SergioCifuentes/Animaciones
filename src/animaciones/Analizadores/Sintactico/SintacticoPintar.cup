package animaciones.Analizadores.Sintactico;
import animaciones.Analizadores.Semantico.TablaDeSimbolos;
import animaciones.Objetos.Lienzo;
import animaciones.Analizadores.Semantico.Objeto;
import java.util.ArrayList;
import java.awt.Color;
import animaciones.ui.IDE;
import java_cup.runtime.Symbol;

 parser code {:
    public boolean error;
    public boolean errorRecuperable;
    public TablaDeSimbolos tablaDeSimbolos;
        protected IDE ide;
    public  void setFrame(IDE frame){
        ide =frame;
    }
public void setTablaDeSimbolos(TablaDeSimbolos tablaDeSimbolos) {
        this.tablaDeSimbolos = tablaDeSimbolos;
    }
    public  void setTabla(TablaDeSimbolos tabla){
        this.tablaDeSimbolos =tabla;
    }

     public void syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        ide.escribirEnOutput("Error Sintactico Recuperado\n");
        ide.escribirEnOutput("\t \tLexema: "+ lexema+"\n");
        ide.escribirEnOutput("\t \tFila: "+ fila+"\n");
        ide.escribirEnOutput("\t \tColumna: "+ columna+"\n");
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        ide.escribirEnOutput("Error Sintactico Panic Mode\n");
        ide.escribirEnOutput("\t \tLexema: "+ lexema+"\n");
        ide.escribirEnOutput("\t \tFila: "+ fila+"\n");
        ide.escribirEnOutput("\t \tColumna: "+ columna+"\n");
    }
    
    public void mostrarElementoNoExistente(String nombreLienzo, Symbol s){
    ide.escribirEnOutput("Error Semantico \n");
    ide.escribirEnOutput("Lienzo \""+nombreLienzo+"\" no existe en El Archivo .lnz \n");

}

    public void ayudarConErroresSemanticos(int tipo,Symbol s,String lexema) {
        int fila = s.right;
        int columna = s.left;
            ide.escribirEnOutput("Error Semantico !!!\n"+lexema);
             ide.escribirEnOutput("\t \tFila: "+ fila+"\n");
        ide.escribirEnOutput("\t \tColumna: "+ columna+"\n");
        String texto = "Sugerencias Para Error:\n";
        switch (tipo) {
           case 1:
            texto+=lexema+" no es una variable int\n";
            break;
            case 2:
            texto+=lexema+" no ha sido declarado\n";
            break;
            case 3:
                texto+="No se pudo asignar el valor a "+lexema+", para Variables int se permiten\n\t-Enteros\n\t-Variables int\n\t-Operaciones Aritmeticas\n";
            break;
            case 4:
                texto+="No se pudo asignar el valor a "+lexema+", para Variables String se permiten\n\t-Cadenas De Caracteres(entre Comillas)\n\t-Variables String\n";
            break;
            case 5:
                texto+="No se pudo asignar el valor a "+lexema+", para Variables boolean se permiten\n\t-true\n\t-false\n\t-Variables boolean\n";
            break;
            case 6:
                texto+="Es imposible realizar Operaciones Aritmeticas con una variable no int\n";
                break;
            case 7:
            texto+=lexema+" no es una variable String\n";
            break;
            case 8:
            texto+=lexema+" no es una variable boolean\n";
            break;
            
            default:
                throw new AssertionError();
        }
       ide.escribirEnOutput(texto);
    }


    public void ayudarConErroresSintacticos(int tipo) {
        String texto = "Sugerencias Para Error:\n";
        switch (tipo) {
           case 1:
                texto+="Para la Declaracion de una variable String solo existen tres tipos\n \t-int \n\t-String\n\t-boolean\n";
            break;
            case 2:
                texto+="Se esperaba una variable boolean como por ejemplo:\n \t-true \n\t-false\n\t-Operacion Relacional\n";
            break;
            case 3:
                texto+="Para las Operaciones Relaciones  se permiten:\n \t-== \n\t->\n\t-<\n\t-<=\n\t->=\n\t-<>\n";
            break;  
            case 4:
                texto+="Para las Operaciones Logicas  se permiten:\n \t-AND \n\t-OR\n";
            break;
            case 6:
                texto+="Debes declarar tus variables con: \nVARS[...]\n";
               break;
            default:
                throw new AssertionError();
        }
       ide.escribirEnOutput(texto);
    }


:}

action code {:
    private boolean error =false;
    private boolean errorRecuperable=false;
        private ArrayList<Inicializacion> inicializaciones = new ArrayList<>();
    private void resetearAtributos(Object[] atributos){
        for(int i=0;i<atributos.length;i++){
            atributos[i]=null;
        }
    }


    public boolean getError(){
        return error;
    }
        protected void mostrarAtributoRepetido(String atributo, Symbol s,AnalizadorSintacticoPintar asp) {
        asp.ide.escribirEnOutput("Error Semantico \n");
        asp.ide.escribirEnOutput("El atributo " + atributo + " ya se encuentra declarado\n");
        asp.ide.escribirEnOutput("\t \tFila: " + s.right + "\n");
        asp.ide.escribirEnOutput("\t \tColumna: " + s.left + "\n");

    }




    protected void mostrarElementoFaltante(Object[] atributos,int tipo, Symbol s,AnalizadorSintacticoPintar asp) {
        asp.ide.escribirEnOutput("Atributo Faltante: \n");
        String text="";
        switch (tipo) {
            
            case 1:
                if(atributos[0]==null){
                    text+="\t-Red\n";
                }
                if(atributos[1]==null){
                    text+="\t-Green\n";
                }
                if(atributos[2]==null){
                     text+="\t-Blue\n";
                }
                break;
            
        }
        asp.ide.escribirEnOutput(text);
        asp.ide.escribirEnOutput("\t \tFila: " + s.right + "\n");
        asp.ide.escribirEnOutput("\t \tColumna: " + s.left + "\n");

    }

:}

/* Terminals (tokens returned by the scanner). */
terminal VARS,INSTRUCCIONES,INT,STRING,BOOLEAN,TRUE,FALSE,PINTAR,IF,ELSE,WHILE,AND,OR,LLAVE_A,LLAVE_C,CORCHETE_A,CORCHETE_C ,
IGUAL,IGUAL_IGUAL,MENOR,MAYOR, MAYOR_IGUAL,MENOR_IGUAL, DIFERENTE, SUMA, RESTA, DIV, MULT, PUNTOS_SEGUIDOS,PUNTO_COMA, COMA,
PARENTESIS_A, PARENTESIS_C ;    
terminal String Id,String,Entero,ERROR;

/* Non-terminals */
non terminal Inicio,Declaraciones,Declaracion, Inicializacion, Numero, Bool, Boolean, OpLog, 
OpRelacional, Instrucciones,VarId,OpAritmetica, Codigo,VariablesBoolean,VariableBoolean,VariableInt,VariablesInt,VariableString,VariablesString, Instruccion, Pintar, Id_Pintar, Num_Pintar, If, Else, While ;

start with Inicio;

Inicio 		::= VARS CORCHETE_A Declaraciones CORCHETE_C Instrucciones {:asp.error=this.error;asp.errorRecuperable=this.errorRecuperable;:}
                    |error {:error=true;asp.ayudarConErroresSintacticos(6);asp.error=this.error;asp.errorRecuperable=this.errorRecuperable;:} ;
Declaraciones   ::= Declaracion PUNTO_COMA Declaraciones
					|Declaracion PUNTO_COMA;
  Declaracion::=  INT VariablesInt  {:for (int i = 0; i < inicializaciones.size(); i++) {
                                     if(asp.tablaDeSimbolos.obtenerTipo((String)inicializaciones.get(i).getId())==null){
                                            if(inicializaciones.get(i).getValor()==null){
                                                if(inicializaciones.get(i).isError()){
                                                    asp.ayudarConErroresSemanticos(TablaDeSimbolos.TIPO_INT-1,((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()),(String)inicializaciones.get(i).getId());
                                                }
                                                asp.tablaDeSimbolos.insertObject((String)inicializaciones.get(i).getId(),TablaDeSimbolos.TIPO_INT,null);
                                           }else{
                                               if(Inicializacion.verificarTipo(TablaDeSimbolos.TIPO_INT,inicializaciones.get(i).getValor())) {
                                                    asp.tablaDeSimbolos.insertObject((String)inicializaciones.get(i).getId(),TablaDeSimbolos.TIPO_INT,inicializaciones.get(i).getValor());
                                                    System.out.println("Valor guardado");
                                                }else{
                                                     asp.ayudarConErroresSemanticos(TablaDeSimbolos.TIPO_INT-1,((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()),(String)inicializaciones.get(i).getId());
                                                }
                                           }
                                    }else{
                                        mostrarAtributoRepetido((String)inicializaciones.get(i).getId(),((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()),asp);
                                    }
                                    
                                }inicializaciones= new ArrayList<>();:}
                    |STRING VariablesString {:for (int i = 0; i < inicializaciones.size(); i++) {
                                     if(asp.tablaDeSimbolos.obtenerTipo((String)inicializaciones.get(i).getId())==null){
                                            if(inicializaciones.get(i).getValor()==null){
                                                if(inicializaciones.get(i).isError()){
                                                    asp.ayudarConErroresSemanticos(TablaDeSimbolos.TIPO_STRING-1,((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()),(String)inicializaciones.get(i).getId());
                                                }
                                                asp.tablaDeSimbolos.insertObject((String)inicializaciones.get(i).getId(),TablaDeSimbolos.TIPO_STRING,null);
                                           }else{
                                               if(Inicializacion.verificarTipo(TablaDeSimbolos.TIPO_STRING,inicializaciones.get(i).getValor())) {
                                                    asp.tablaDeSimbolos.insertObject((String)inicializaciones.get(i).getId(),TablaDeSimbolos.TIPO_STRING,inicializaciones.get(i).getValor());
                                                    System.out.println("Valor guardado");
                                                }else{
                                                     asp.ayudarConErroresSemanticos(TablaDeSimbolos.TIPO_STRING-1,((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()),(String)inicializaciones.get(i).getId());
                                                }
                                           }
                                    }else{
                                        mostrarAtributoRepetido((String)inicializaciones.get(i).getId(),((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()),asp);
                                    }
                                    
                                }inicializaciones= new ArrayList<>();:}
                    |BOOLEAN VariablesBoolean   {:for (int i = 0; i < inicializaciones.size(); i++) {
                                     if(asp.tablaDeSimbolos.obtenerTipo((String)inicializaciones.get(i).getId())==null){
                                            if(inicializaciones.get(i).getValor()==null){
                                                if(inicializaciones.get(i).isError()){
                                                    asp.ayudarConErroresSemanticos(TablaDeSimbolos.TIPO_BOOLEAN-1,((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()),(String)inicializaciones.get(i).getId());
                                                }
                                                asp.tablaDeSimbolos.insertObject((String)inicializaciones.get(i).getId(),TablaDeSimbolos.TIPO_BOOLEAN,null);
                                           }else{
                                               if(Inicializacion.verificarTipo(TablaDeSimbolos.TIPO_BOOLEAN,inicializaciones.get(i).getValor())) {
                                                    asp.tablaDeSimbolos.insertObject((String)inicializaciones.get(i).getId(),TablaDeSimbolos.TIPO_BOOLEAN,inicializaciones.get(i).getValor());
                                                    System.out.println("Valor guardado");
                                                }else{
                                                     asp.ayudarConErroresSemanticos(TablaDeSimbolos.TIPO_BOOLEAN-1,((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()),(String)inicializaciones.get(i).getId());
                                                }
                                           }
                                    }else{
                                        mostrarAtributoRepetido((String)inicializaciones.get(i).getId(),((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()),asp);
                                    }
                                    
                                }inicializaciones= new ArrayList<>();:}
 
                    |error{:asp.ayudarConErroresSintacticos(1);:};

VariablesInt     ::=VariableInt:in COMA VariablesInt  {:inicializaciones.add(0,(Inicializacion)in);:}
			|VariableInt:in{:inicializaciones.add(0,(Inicializacion)in);:};
                        
VariableInt	::= Id:id IGUAL Numero:ini {:
                                            if(ini!=null){Inicializacion in = new Inicializacion((String)id,ini);
                                                RESULT =in;
                                             }else{
                                            Inicializacion in = new Inicializacion((String)id,null);
                                            in.setError(true);
                                            RESULT =in;
                                            }:}
                    |Id:id IGUAL VarId:ini {:
                                            if(ini!=null){Inicializacion in = new Inicializacion((String)id,ini);
                                                RESULT =in;
                                             }else{
                                            Inicializacion in = new Inicializacion((String)id,null);
                                            in.setError(true);
                                            RESULT =in;
                                            }:}
				| Id:id{:Inicializacion in = new Inicializacion((String)id,null);
                                          RESULT =in;:};
VarId ::= Id:id{:Object valor=asp.tablaDeSimbolos.obtenerExistencia((String)id);
                            if (valor!=null){
                            RESULT=((Objeto)valor).getValor();
                        
                    }else{
                        asp.ayudarConErroresSemanticos(2,((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()),(String)id);
                        RESULT=null;}:};
VariablesString     ::=VariableString:in COMA VariablesString  {:inicializaciones.add(0,(Inicializacion)in);:}
			|VariableString:in{:inicializaciones.add(0,(Inicializacion)in);:};
  
VariableString	::= Id:id IGUAL String:ini {:if(ini!=null){Inicializacion in = new Inicializacion((String)id,ini);
                                                RESULT =in;
                                             }else{
                                            Inicializacion in = new Inicializacion((String)id,null);
                                            in.setError(true);
                                            RESULT =in;
                                            }:}
                    |Id:id IGUAL VarId:ini {:
                                            if(ini!=null){Inicializacion in = new Inicializacion((String)id,ini);
                                                RESULT =in;
                                             }else{
                                            Inicializacion in = new Inicializacion((String)id,null);
                                            in.setError(true);
                                            RESULT =in;
                                            }:}
				| Id:id{:Inicializacion in = new Inicializacion((String)id,null);
                                          RESULT =in;:};


VariablesBoolean     ::=VariableBoolean:in COMA VariablesBoolean  {:inicializaciones.add(0,(Inicializacion)in);:}
			|VariableBoolean:in{:inicializaciones.add(0,(Inicializacion)in);:};
  
VariableBoolean	::= Id:id IGUAL Bool:ini {:if(ini!=null){Inicializacion in = new Inicializacion((String)id,ini);
                                                RESULT =in;
                                             }else{
                                            Inicializacion in = new Inicializacion((String)id,null);
                                            in.setError(true);
                                            RESULT =in;
                                            }:}
                                |Id:id IGUAL VarId:ini {:
                                            if(ini!=null){Inicializacion in = new Inicializacion((String)id,ini);
                                                RESULT =in;
                                             }else{
                                            Inicializacion in = new Inicializacion((String)id,null);
                                            in.setError(true);
                                            RESULT =in;
                                            }:}
				| Id:id{:Inicializacion in = new Inicializacion((String)id,null);
                                          RESULT =in;:};

Numero     ::= Entero:num1 OpAritmetica:op Numero:num2{:if(num1!=null&&num2!=null){

                                                switch ((Integer)op) {
                                                 case 1:
                                                    RESULT = Integer.parseInt(num1)+(Integer)num2;
                                                break;
                                                case 2:
                                                    RESULT = Integer.parseInt(num1)-(Integer)num2;
                                                break;
                                                case 3:
                                                    RESULT = Integer.parseInt(num1)*(Integer)num2;
                                                break;
                                                case 4:
                                                    RESULT = Integer.parseInt(num1)/(Integer)num2;
                                                break;
                                                        }
                                            }else{
                                            RESULT=null;
                                            }:}

		|VarId:id OpAritmetica:op Numero:num2  {:if(id!=null&&num2!=null){
                                                try {
                                                    Integer num1=(Integer)id;
                                                    switch ((Integer)op) {
                                                 case 1:
                                                    RESULT = num1+(Integer)num2;
                                                break;
                                                case 2:
                                                    RESULT = num1-(Integer)num2;
                                                break;
                                                case 3:
                                                    RESULT = num1*(Integer)num2;
                                                break;
                                                case 4:
                                                    RESULT = num1/(Integer)num2;
                                                break;
                                                        }
                                                } catch (Exception e) {
                                                    asp.ayudarConErroresSemanticos(1,((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()),(String)id);
                                                    RESULT =null;
                                                    }
                                                
                                            }else{
                                            RESULT=null;
                                            }:}
                |VarId:id1 OpAritmetica:op VarId:id2   {:if(id2!=null&&id1!=null){
                                                try {
                                                    Integer num1=(Integer)id1;
                                                    Integer num2=(Integer)id2;
                                                    switch ((Integer)op) {
                                                 case 1:
                                                    RESULT = num1+num2;
                                                break;
                                                case 2:
                                                    RESULT = num1-num2;
                                                break;
                                                case 3:
                                                    RESULT =num1*num2;
                                                break;
                                                case 4:
                                                    RESULT = num1/num2;
                                                break;
                                                        }
                                                } catch (Exception e) {
                                                    asp.ayudarConErroresSemanticos(1,((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()),(String)id1);
                                                    RESULT =null;
                                                    }
                                                
                                            }else{
                                            RESULT=null;
                                            }:}
                |Entero:num1 OpAritmetica:op VarId:id  {:if(id!=null&&num1!=null){
                                                try {
                                                    Integer num2=(Integer)id;
                                                    switch ((Integer)op) {
                                                 case 1:
                                                    RESULT =Integer.parseInt(num1)+num2;
                                                break;
                                                case 2:
                                                    RESULT = Integer.parseInt(num1)-num2;
                                                break;
                                                case 3:
                                                    RESULT =Integer.parseInt(num1)*num2;
                                                break;
                                                case 4:
                                                    RESULT =Integer.parseInt(num1)/num2;
                                                break;
                                                        }
                                                } catch (Exception e) {
                                                    asp.ayudarConErroresSemanticos(1,((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()),(String)id);
                                                    RESULT =null;
                                                    }
                                                
                                            }else{
                                            RESULT=null;
                                            }:}
                |Entero:entero{:RESULT=Integer.parseInt((String)entero);:};

OpAritmetica::= SUMA{:RESULT=1;:}
                |RESTA{:RESULT=2;:}
                |MULT{:RESULT=3;:}
                |DIV{:RESULT=4;:};
Bool::= Boolean:bool{:RESULT =bool;:}
	|Boolean:bool1 OpLog:op Bool:bool2{:if(bool1!=null&&op!=null&&bool2!=null){
                                                                RESULT = Inicializacion.realizarOperacionLogica(Boolean.parseBoolean((String)bool1),
                                                                           Boolean.parseBoolean((String)bool2),Integer.parseInt((String)op) );
                                                                    }else{
                                                                    RESULT=null;
                                                                    }:};
OpLog::= AND{:RESULT=Inicializacion.AND;:}
	|OR{:RESULT=Inicializacion.OR;:}
        |error {:asp.ayudarConErroresSintacticos(4);
                            RESULT=null;:};
Boolean     ::=  TRUE   {:RESULT = true;:}
		| FALSE{:RESULT = false;:}
		| Numero:num1 OpRelacional:op Numero:num2{:if(num1!=null&&op!=null&&num2!=null){
                                                                RESULT = Inicializacion.realizarOperacionRelacional(Integer.parseInt((String)num1),
                                                                           Integer.parseInt((String)num2),Integer.parseInt((String)op) );
                                                                    }else{
                                                                    RESULT=null;
                                                                    }:}
                |Numero:num1 OpRelacional:op VarId:id2{:if(num1!=null&&op!=null&&id2!=null){
                                                                try {
                                                    Integer num2=(Integer)id2;
                                                    RESULT = Inicializacion.realizarOperacionRelacional(Integer.parseInt((String)num1),
                                                                           num2,Integer.parseInt((String)op) );
                                                        
                                                        } catch (Exception e) {
                                                             asp.ayudarConErroresSemanticos(1,((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()),(String)id2);
                                                            RESULT =null;
                                                             }
                                                               
                                                                    }else{
                                                                    RESULT=null;
                                                                    }:}
                |VarId:id1 OpRelacional:op VarId:id2   {:if(id1!=null&&op!=null&&id2!=null){
                                                                try {
                                                                Integer num1=(Integer)id1;
                                                    Integer num2=(Integer)id2;
                                                    RESULT = Inicializacion.realizarOperacionRelacional(num1,num2,Integer.parseInt((String)op) );
                                                        
                                                        } catch (Exception e) {
                                                             asp.ayudarConErroresSemanticos(1,((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()),id1+" "+id2);
                                                            RESULT =null;
                                                             }
                                                               
                                                                    }else{
                                                                    RESULT=null;
                                                                    }:}
                |VarId:id1 OpRelacional:op Numero:num2 {:if(id1!=null&&op!=null&&num2!=null){
                                                                try {
                                                    Integer num1=(Integer)id1;
                                                    RESULT = Inicializacion.realizarOperacionRelacional(num1,
                                                                           Integer.parseInt((String)num2),Integer.parseInt((String)op) );
                                                        
                                                        } catch (Exception e) {
                                                             asp.ayudarConErroresSemanticos(1,((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoPintar$stack.peek()),(String)id1);
                                                            RESULT =null;
                                                             }
                                                               
                                                                    }else{
                                                                    RESULT=null;
                                                                    }:};
                
OpRelacional::= IGUAL_IGUAL{:RESULT= Inicializacion.IGUAL_IGUAL;:}
                |MENOR  {:RESULT= Inicializacion.IGUAL_IGUAL;:}
                |MAYOR  {:RESULT= Inicializacion.IGUAL_IGUAL;:}
                |MAYOR_IGUAL    {:RESULT= Inicializacion.IGUAL_IGUAL;:}
                |MENOR_IGUAL    {:RESULT= Inicializacion.IGUAL_IGUAL;:}
                |DIFERENTE  {:RESULT= Inicializacion.IGUAL_IGUAL;:};






Instrucciones 	::=  INSTRUCCIONES PARENTESIS_A Id PARENTESIS_C CORCHETE_A Codigo CORCHETE_C Instrucciones
					|INSTRUCCIONES PARENTESIS_A Id PARENTESIS_C CORCHETE_A Codigo CORCHETE_C ;

Codigo ::=  Instruccion Codigo
		|Instruccion;
Instruccion::= Id IGUAL Id PUNTO_COMA
                |Id IGUAL Numero PUNTO_COMA
                |Id IGUAL String PUNTO_COMA
                |Id IGUAL Bool PUNTO_COMA
			|Pintar PUNTO_COMA
			|If
			|While;
CodigoNoRealizable ::=  Instruccion CodigoNoRealizable
                        |Instruccion;			
Pintar::=PINTAR PARENTESIS_A Id_Pintar COMA Id_Pintar COMA Num_Pintar COMA Num_Pintar PARENTESIS_C;
Id_Pintar::=String:string {:RESULT =string;:}
            |VarId:id {:RESULT =id;:};
Num_Pintar::=Numero PUNTOS_SEGUIDOS Num_Pintar
			|Numero
                |Id PUNTOS_SEGUIDOS Num_Pintar
                |Id;
If::=	IF PARENTESIS_A Bool PARENTESIS_C LLAVE_A Codigo LLAVE_C Else
        |IF PARENTESIS_A Id PARENTESIS_C LLAVE_A CodigoNoRealizable LLAVE_C Else;
Else::=	ELSE LLAVE_A Codigo LLAVE_C
		|;
While	::= WHILE PARENTESIS_A Bool PARENTESIS_C LLAVE_A Codigo LLAVE_C
            |WHILE PARENTESIS_A Id PARENTESIS_C LLAVE_A Codigo LLAVE_C;


